{"version":3,"sources":["brains/AudioSourcer.ts","assets/plus.svg","assets/minus.svg","components/HarmonicSeriesDefinition.tsx","brains/AudioMath.ts","components/SineWave.tsx","components/HarmonicSeriesNotes.tsx","assets/SpeakerOn.svg","assets/SpeakerOff.svg","components/NoteBanner.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["analyser","audioContext","updateNoteFrequency","HarmonicSeriesDefinition","useState","Minus","collapsedIcon","setCollapsedIcon","className","onClick","descriptionDiv","document","getElementsByClassName","classList","add","Plus","remove","src","alt","noteStrings","noteFromPitch","frequency","noteNum","Math","log","round","centsOffFromPitch","note","floor","pow","frequencyFromNoteNumber","detuneTypeFromPitch","detune","getNote","noteNumber","SineWave","props","canvasRef","useRef","contextRef","theta","useEffect","canvas","current","width","height","style","context","getContext","Draw","clearRect","beginPath","x","y","sin","PI","waves","lineTo","lineWidth","strokeStyle","elementHovered","localStorage","getItem","parseInt","GetColor","stroke","window","requestAnimationFrame","ref","GetContainerWidth","container","undefined","containerWidth","getComputedStyle","HarmonicSeriesNotes","canvasWidth","setCanvasWidth","elementIteration","UpdateCanvasWidth","addEventListener","removeEventListener","harmonicSeriesElements","seriesElem","element","DeriveHarmonicSeriesFromFrequency","UpdateElementHovered","hover","setItem","toString","map","Tone","toDestination","triggerAttackRelease","onMouseEnter","onMouseLeave","id","mediaStreamSource","buf","Float32Array","audioInitialized","rafID","previousNote","STREAM_CONSTRAINTS","audio","advanced","echoCancellation","autoGainControl","noiseSuppression","error","alert","EnableLiveInput","callbackForNoteFrequency","AudioContext","callback","navigator","getUserMedia","e","GetUserMedia","GotStream","stream","createMediaStreamSource","createAnalyser","fftSize","connect","UpdatePitch","getFloatTimeDomainData","ac","sampleRate","SIZE","length","rms","i","val","sqrt","r1","r2","j","abs","slice","c","Array","fill","z","d","maxval","maxpos","w","T0","x1","x2","x3","a","autoCorrelate","pitch","detuneType","newNote","webkitRequestAnimationFrame","NoteBanner","hasAudioStarted","setHasAudioStarted","isHover","setIsHover","formattedFrequency","formattedNode","cancelAnimationFrame","console","updateNoteAndFrequency","speakerOnIcon","SpeakerOn","speakerOffIcon","SpeakerOff","GetHoveredElement","App","React","setFrequency","setNote","newFrequency","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4af8914a.chunk.js","sourcesContent":["import { autoCorrelate, detuneTypeFromPitch, getNote, noteFromPitch } from \"./AudioMath\";\n\nlet mediaStreamSource = null;\nlet analyser: AnalyserNode;\nlet audioContext: AudioContext;\nvar buflen = 2048;\nvar buf = new Float32Array( buflen );\nvar audioInitialized: boolean = false;\nvar rafID: number = 0;\nvar previousNote: string = '';\nlet updateNoteFrequency: (newNote: string, newFrequency: number) => void;\n\nconst InitAudio = () => {\n    audioContext = new AudioContext();\n    audioInitialized = true;\n}\n\nconst STREAM_CONSTRAINTS: MediaStreamConstraints = {\n    audio: {\n        advanced: [{\n            echoCancellation: false,\n            autoGainControl: false,\n            noiseSuppression: false,\n        }]\n    }\n}\n\nconst error = () => {\n    alert('Stream generation failed.');\n}\n\nconst GetUserMedia = (callback: NavigatorUserMediaSuccessCallback) => {\n    try {\n        navigator.getUserMedia(STREAM_CONSTRAINTS, callback, error);\n    } catch (e) {\n        alert('getUserMedia threw exception :' + e);\n    }\n}\n\nexport const EnableLiveInput = (callbackForNoteFrequency: (newNote: string, newFrequency: number) => void) => {\n    if (!audioInitialized) InitAudio();\n    updateNoteFrequency = callbackForNoteFrequency;\n    GetUserMedia(GotStream);\n}\n\nexport const CancelAudioStream = () => {\n    window.cancelAnimationFrame(rafID);\n    console.log('Audio stream stopped');\n}\n\nconst GotStream = (stream: MediaStream) => {\n    // Create an AudioNode from the stream.\n    mediaStreamSource = audioContext.createMediaStreamSource(stream);\n\n    // Connect it to the destination.\n    analyser = audioContext.createAnalyser();\n    analyser.fftSize = 2048;\n    mediaStreamSource.connect(analyser);\n    UpdatePitch();\n}\n\nconst UpdatePitch = () => {\n    analyser.getFloatTimeDomainData( buf );\n\tvar ac = autoCorrelate( buf, audioContext.sampleRate );\n    \n    if (ac !== -1) {\n        const pitch = Math.round(ac);\n        const note = noteFromPitch(pitch);\n\n        // TODO: Find relation between pitch and frequency (hertz)\n        // For now I'm assuming they're the same\n        const detuneType = detuneTypeFromPitch(ac, note);\n        const newNote = `${getNote(note%12)} ${detuneType}`\n        if (previousNote === '' || previousNote !== newNote) {\n            //console.log(`${pitch}Hz - ${newNote}`);\n            previousNote = newNote;\n        }\n        updateNoteFrequency(newNote, pitch);\n    }\n\n    if (!window.requestAnimationFrame) {\n\t\twindow.requestAnimationFrame = window.webkitRequestAnimationFrame;\n    }\n\n    rafID = window.requestAnimationFrame(UpdatePitch);\n}","export default __webpack_public_path__ + \"static/media/plus.2e81f370.svg\";","export default __webpack_public_path__ + \"static/media/minus.05fcd03d.svg\";","import { useState } from 'react';\nimport '../style/HarmonicSeriesDefinition.css';\nimport Plus from '../assets/plus.svg'\nimport Minus from '../assets/minus.svg'\n\nconst HarmonicSeriesDefinition = () => {\n    const [collapsedIcon, setCollapsedIcon] = useState(Minus);\n\n    const ToggleDescription = () => {\n        const descriptionDiv: Element = document.getElementsByClassName('description-body')[0]\n        if (descriptionDiv === null) return\n        if (collapsedIcon === Minus) {\n            descriptionDiv.classList.add('collapsed')\n            setCollapsedIcon(Plus)\n        }\n        else {\n            descriptionDiv.classList.remove('collapsed')\n            setCollapsedIcon(Minus)\n        }\n            \n    }\n\n    return (\n        <div className='description'>\n            <div className='description-header'>\n                <h3 className='subheader'>The Harmonic Series in Music</h3>\n                <img onClick={ToggleDescription} className='toggle-description' src={collapsedIcon} alt=\"Expand/Collapse Description\"/>\n            </div>\n            <div className='description-body'>\n                <p>\n                    Imagine you strike a string in a guitar.\n                </p>\n                <p>\n                    Now, you are expecting to hear back a tone - the one that corresponds to the string. In reality, what we end up hearing is much more than that - it is a whole collection of tones. The collection starts with a low tone which is the intended one, and it's followed by a series of higher pitch tones that are relative to the initial tone.\n                </p>\n                <p>\n                    Althought this is an infinite series, we can only hear a small subset of these tones.\n                </p>\n                <p>\n                    These following tones are called harmonics or overtones\n                </p>\n\n                <h3 className='subheader'>Why does this happen?</h3>\n                \n                <p>\n                    When we hit a string, the string starts bouncing up and down creating a vibration. The tone we are producing is dictated by the frequency at which the string is vibrating. This vibration is creating a series of sine waves - the first sine wave is one big wave bouncing through the whole string, the second one is of two waves, the third of three waves, and so on. All these different vibrations in the string are happening at the same time!\n                </p>\n                <p>\n                    The tones produced by the string come from the wavelength of those sine waves - the first series has one long sine wave, it has the smallest frequency and therefore the lowest tone, and the following frequencies will come from the subsequent sine waves in the series which are getting smaller and smaller, therefore playing higher and higher tones.\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default HarmonicSeriesDefinition;","const noteStrings: string[] = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\nexport const noteFromPitch = (frequency: number) => {\n\tvar noteNum = 12 * (Math.log( frequency / 440 )/Math.log(2) );\n\treturn Math.round( noteNum ) + 69;\n}\n\nconst frequencyFromNoteNumber = (note: number) => {\n\treturn 440 * Math.pow(2,(note-69)/12);\n}\n\nconst centsOffFromPitch = (frequency: number, note: number) => {\n\treturn Math.floor( 1200 * Math.log( frequency / frequencyFromNoteNumber( note ))/Math.log(2) );\n}\n\nexport const detuneTypeFromPitch = (frequency: number, note: number) => {\n\tconst detune: number = centsOffFromPitch(frequency, note);\n\treturn detune === 0 ? '' : detune < 0 ? 'flat' : 'sharp';\n}\n\nexport const getNote = (noteNumber: number) => {\n    return noteStrings[noteNumber%12];\n}\n\nexport const autoCorrelate = (buf: Float32Array, sampleRate: number) => {\n\t// Implements the ACF2+ algorithm\n\tvar SIZE = buf.length;\n\tvar rms = 0;\n\n\tfor (var i=0;i<SIZE;i++) {\n\t\tvar val = buf[i];\n\t\trms += val*val;\n\t}\n\trms = Math.sqrt(rms/SIZE);\n\tif (rms<0.01) // not enough signal\n\t\treturn -1;\n\n\tvar r1=0, r2=SIZE-1, thres=0.2;\n\tfor (var j=0; j<SIZE/2; j++)\n\t\tif (Math.abs(buf[j])<thres) { r1=j; break; }\n\tfor (var x=1; x<SIZE/2; x++)\n\t\tif (Math.abs(buf[SIZE-x])<thres) { r2=SIZE-x; break; }\n\n\tbuf = buf.slice(r1,r2);\n\tSIZE = buf.length;\n\n\tvar c = new Array(SIZE).fill(0);\n\tfor (var y=0; y<SIZE; y++)\n\t\tfor (var z=0; z<SIZE-y; z++)\n\t\t\tc[y] = c[y] + buf[z]*buf[z+y];\n\n\tvar d=0; while (c[d]>c[d+1]) d++;\n\tvar maxval=-1, maxpos=-1;\n\tfor (var w=d; w<SIZE; w++) {\n\t\tif (c[w] > maxval) {\n\t\t\tmaxval = c[w];\n\t\t\tmaxpos = w;\n\t\t}\n\t}\n\tvar T0 = maxpos;\n\n\tvar x1=c[T0-1], x2=c[T0], x3=c[T0+1];\n\tconst a = (x1 + x3 - 2*x2)/2;\n\tconst b = (x3 - x1)/2;\n\tif (a) T0 = T0 - b/(2*a);\n\n\treturn sampleRate/T0;\n}","import { useEffect, useRef } from 'react'\n\ninterface SineWaveProps {\n    frequency: number\n    height: number\n    width: number\n    waves: number\n}\n\nconst SineWave = (props: SineWaveProps) => {\n\n    // getComputerStyle can be expensive\n    // We can pass the color from the parent whenever the container is hovered\n    const GetColor = (): string => {\n        const elementHovered = localStorage.getItem('elementHovered')\n        if (elementHovered === null) return 'white'\n        return parseInt(elementHovered, 10) === props.frequency ? '#2f8b44' : 'white'\n    }\n\n    const canvasRef = useRef<HTMLCanvasElement | null>(null)\n    const contextRef = useRef<CanvasRenderingContext2D | null>(null)\n    let theta: number = 0\n\n    useEffect(() => {\n        const canvas = canvasRef.current\n        if (canvas === null || canvasRef.current === null) return\n        canvas.width = props.width * 2\n        canvas.height = props.height * 2\n        canvas.style.width = `${props.width}px`\n        canvas.style.height = `${props.height}px`\n\n        const context = canvas.getContext('2d')\n        if (context === null) return\n        contextRef.current = context\n        Draw();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.frequency, props.height, props.width])\n\n    const Draw = () => {\n        \n        if (contextRef.current === null || canvasRef.current === null) return\n        const context: CanvasRenderingContext2D = contextRef.current\n        const canvas: HTMLCanvasElement = canvasRef.current\n\n        context.clearRect(0, 0, canvas.width, canvas.height)\n        context.beginPath()\n        //context.moveTo(0, canvas.height / 2)\n\n        for (let x = 0; x < canvas.width; x++) {\n            const y: number = canvas.height / 2 + \n                // Math.sin takes radians\n                // i/total width * pi (pi is half an oscillation) * number of half oscillations we want\n                Math.sin(x/canvas.width * Math.PI * props.waves) *\n                    50 /* amplitude */ *\n                    Math.sin(theta) /* speed */\n\n            context.lineTo(x, y)\n        }\n\n        context.lineWidth = 10\n        context.strokeStyle = GetColor()\n        context.stroke()\n\n        window.requestAnimationFrame(Draw)\n        theta += 0.1 // speed\n    }\n\n    return (\n        <canvas\n            className='sine-wave'\n            ref={canvasRef}\n        />\n    )\n}\n\nexport default SineWave;","import { detuneTypeFromPitch, getNote, noteFromPitch } from \"../brains/AudioMath\";\nimport '../style/HarmonicSeriesNotes.css';\nimport SineWave from \"./SineWave\";\nimport * as Tone from 'tone'\nimport { useEffect, useState } from \"react\";\n\ninterface HarmonicSeriesNotesProps {\n    frequency: number;\n}\n\ninterface HarmonicSeriesElement {\n    frequency: number;\n    note: string;\n}\n\nconst PlayTone = (frequency: number) => {\n    // create a synth and connect it to the main output (your speakers)\n    const synth = new Tone.Synth().toDestination();\n    // play for the duration of an 8th note\n    synth.triggerAttackRelease(frequency, \"8n\");    \n}\n\nconst GetContainerWidth = (): number => {\n    const container = document.getElementsByClassName('harmonic-element-container')[0]\n    if (container === undefined) return 0\n\n    const containerWidth = window.getComputedStyle(container).width\n    // I want the sine wave to be 60% of the width of the card    \n    return parseInt(containerWidth, 10) * 0.6\n}\n\nconst DeriveHarmonicSeriesFromFrequency = (frequency: number): HarmonicSeriesElement[] => {\n    const numberOfSeriesIterations: number = 8;\n    const harmonicSeriesElements: HarmonicSeriesElement[] = [];\n\n    for (let seriesElem = 0; seriesElem < numberOfSeriesIterations; seriesElem++) {\n        const noteNumber = noteFromPitch(frequency * (seriesElem + 1));\n        const note = getNote(noteNumber % 12);\n        const detune = detuneTypeFromPitch(frequency, noteNumber);\n        const element: HarmonicSeriesElement = {\n            frequency: frequency * (seriesElem+1),\n            note: `${note} ${detune}`\n        };\n\n        harmonicSeriesElements[seriesElem] = element;\n    }\n\n    return harmonicSeriesElements\n}\n\nconst HarmonicSeriesNotes = (props: HarmonicSeriesNotesProps) => {\n\n    const [canvasWidth, setCanvasWidth] = useState(0)\n\n    let elementIteration: number = 0;\n\n    useEffect(() => {\n\n        setCanvasWidth(GetContainerWidth())\n        const UpdateCanvasWidth = (): void => {\n            setCanvasWidth(GetContainerWidth())\n        }\n\n        window.addEventListener('resize', UpdateCanvasWidth);\n    return () => {\n        window.removeEventListener('resize', UpdateCanvasWidth);\n    }\n    }, [])\n\n    const harmonicSeriesElements: HarmonicSeriesElement[] = DeriveHarmonicSeriesFromFrequency(props.frequency)\n\n    const UpdateElementHovered = (element: number, hover: boolean) => {\n        if (hover) localStorage.setItem('elementHovered', element.toString())\n        else localStorage.setItem('elementHovered', '0')\n    }\n\n    return(\n        <div className='harmonic-series'>\n        <h3>Your Harmonic Series</h3>\n        <div className='harmonic-table-container'>\n            <div>Frequency - Note</div>\n            <div className='wave-header'>Vibration of String</div>\n        </div>\n        {\n            harmonicSeriesElements.map(element => {\n                elementIteration++;\n                return (\n                    <div className='harmonic-element-container' key={element.frequency} onClick={() => PlayTone(element.frequency)}\n                        onMouseEnter={() => UpdateElementHovered(element.frequency, true)}\n                        onMouseLeave={() => UpdateElementHovered(0, false)}>\n                        <div id={element.frequency.toString()}>{element.frequency} Hz - {element.note}</div>\n                        <div className='sine-wave'>\n                            <SineWave\n                                frequency={element.frequency}\n                                height={100}\n                                width={canvasWidth}\n                                waves={elementIteration}\n                            />\n                        </div>\n                    </div>\n                );\n            })\n        }\n        </div>\n    )\n}\n\nexport default HarmonicSeriesNotes;","export default __webpack_public_path__ + \"static/media/SpeakerOn.4c640b39.svg\";","export default __webpack_public_path__ + \"static/media/SpeakerOff.4255cd4c.svg\";","import { useState } from 'react';\nimport '../style/NoteBanner.css'\nimport { CancelAudioStream, EnableLiveInput } from '../brains/AudioSourcer';\nimport SpeakerOn from '../assets/SpeakerOn.svg'\nimport SpeakerOff from '../assets/SpeakerOff.svg'\n\ninterface NoteBannerProps {\n    note: string;\n    frequency: number;\n    updateNoteAndFrequency: (newNote: string, newFrequency: number) => void;\n}\n\nconst NoteBanner = (props: NoteBannerProps) => {\n    const [hasAudioStarted, setHasAudioStarted] = useState(false);\n    const [isHover, setIsHover] = useState(false);\n\n    const ToggleAudio = () => {\n        if (hasAudioStarted) {\n            CancelAudioStream();\n        }\n        else {\n            EnableLiveInput(props.updateNoteAndFrequency);\n        }\n\n        setHasAudioStarted((hasAudioStarted) => !hasAudioStarted);\n    }\n\n    const GetNoteString = (): string => {\n        if (props.frequency !== 0 || hasAudioStarted) {\n            return `${formattedFrequency} ${formattedNode}`\n        }\n\n        return 'To find your harmonic series, click here and play any sound'\n        \n    }\n\n    const GetHoveredElement = (): JSX.Element | null => {\n        const speakerOnIcon = <img height='30px' width='30px' src={SpeakerOn} alt=\"Speaker is on\"/>\n        const speakerOffIcon = <img height='30px' width='30px' src={SpeakerOff} alt=\"Speaker is off\"/>\n\n        if (hasAudioStarted && isHover)\n            return hasAudioStarted ? speakerOnIcon : speakerOffIcon\n\n        if (!hasAudioStarted && isHover && props.frequency !== 0)\n            return speakerOffIcon\n        \n        return null;\n    }\n\n    const formattedFrequency = `${props.frequency} Hz`;\n    const formattedNode = props.note !== '' ? `- ${props.note.toString()}` : '';\n    return (\n        <div onClick={ToggleAudio} className='note-banner' onMouseEnter={() => setIsHover(true)} onMouseLeave={() => setIsHover(false)}>\n            {GetNoteString()} {GetHoveredElement()}\n        </div>\n    )\n}\n\nexport default NoteBanner;","import React from 'react';\nimport '../style/App.css';\nimport HarmonicSeriesDefinition from './HarmonicSeriesDefinition';\nimport HarmonicSeriesNotes from './HarmonicSeriesNotes';\nimport NoteBanner from './NoteBanner';\n\nconst App = () => {\n  const [frequency, setFrequency] = React.useState(0);\n  const [note, setNote] = React.useState('');\n\n  const UpdateNoteAndFrequency = (newNote: string, newFrequency: number) => {\n    setNote(newNote);\n    setFrequency(newFrequency);\n  }\n\n\n  return (\n    <div className=\"App\">\n        <HarmonicSeriesDefinition/>\n        <NoteBanner updateNoteAndFrequency={UpdateNoteAndFrequency} note={note} frequency={frequency}/>\n        <br></br>\n        { frequency !== 0 ? <HarmonicSeriesNotes frequency={frequency}/> : null }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}